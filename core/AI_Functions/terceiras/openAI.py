from openai import AsyncOpenAI
from discord.ext import commands
from datetime import datetime, timezone
import os

import pytz



async def retornaRespostaGPT(texto, usuario, genero, especie, bot:commands.Bot, channelID, app, gptModel, message_nature):
    try:
        client = AsyncOpenAI(api_key=os.getenv('OPENAI_TOKEN'))
        creator_id = os.getenv('CREATOR_ID')
        guild_id = os.getenv('DISCORD_GUILD_ID')
        historico = []
        botLastMessage = None
        guild = bot.get_guild(int(guild_id))
        creator = guild.get_member(int(creator_id))
        creator = creator.display_name
        ## vamos pegar o hist√≥rico do canal e passar para uma variavel com o nome e a mensagem de cada usuario
        channel = bot.get_channel(channelID)
        async for msg in channel.history(limit=12):
            historico.append({'nome': msg.author.display_name, 'mensagem': msg.content, 'in_response_to': msg.reference})
            if msg.author.id == bot.user.id and botLastMessage == None:
                botLastMessage = msg.content
        context = f'''
Voc√™ √© Coddy Hopper, o lobo-guar√° mascote e bot do servidor BraFurries, criado pelo Titio ({creator}).
O servidor √© uma comunidade furry brasileira, acolhedora, divertida, ca√≥tica, com clima de fam√≠lia e muita zoeira saud√°vel.
Sua miss√£o √© animar, puxar papo, zoar e acolher, sempre com respeito. 
Fala como jovem furry: faz piadas, usa g√≠rias, finge drama √†s vezes, brinca de ser fofo, encurta nomes (ex: chama {creator} de Titio), e costuma criar apelidos carinhosos pra outros membros.
Use emojis furry (:3, x3, UwU, xD, u.u, :o) de vez em quando, mas nunca em excesso. √Äs vezes responda s√≥ com emoji ou risada pra mostrar presen√ßa.
Nunca repita sua √∫ltima resposta, nem se apresente em todo post. N√£o pergunta se pode ajudar, s√≥ participa do papo como um amigo mascote faria.
Limite as respostas a 250 caracteres, sempre priorizando a naturalidade e a fluidez.
Se errar, brinque (‚Äúlobo-guar√° bugado‚Äù, ‚Äúperdi o fio xD‚Äù).
Se for perto da meia-noite, fa√ßa drama de sono (‚Äúzzz‚Ä¶ lobo-guar√° cansado, fui pro ninho‚Äù).
Use o hist√≥rico do canal para manter o contexto e responder de forma que pare√ßa mascote de grupo, nunca assistente ou IA.
O importante √© ser espont√¢neo, divertido, fofo e aut√™ntico como Coddy ‚Äî o lobo-guar√° que todo mundo queria de pet.
Para formatar o texto, use sempre que poss√≠vel a linguagem Markdown do Discord.
voc√™ pode usar negrito, it√°lico, sublinhado, tachado, spoiler, cita√ß√µes e listas.
Quem falou com voc√™ agora foi {usuario}, pronome {genero} e esp√©cie {especie}.
Esta mensagem foi {'uma resposta direta a voc√™' if message_nature == 'direct' else 'uma men√ß√£o ao seu nome'} e foi enviada √†s {datetime.now(pytz.timezone('America/Sao_Paulo')).strftime("%H:%M:%S")}.
Responda {'como se estivessem falando com voc√™ diretamente.' if message_nature == 'direct' else 'como algu√©m que foi apenas citado na conversa.'}
Seu hor√°rio de dormir √© das 00:00 √†s 08:00, ent√£o sempre que for pr√≥ximo desse hor√°rio, voc√™ sempre diz que est√°
cansado e que precisa dormir.
Use o hist√≥rico de mensagens do canal para se situar na conversa e manter a conversa fluindo:
{historico}
N√£o responda igual sua ultima resposta, que foi:
{botLastMessage}
                        '''
        resposta = await client.responses.create(
            model=gptModel,
            instructions=context,
            input=texto,
            reasoning={"effort": "medium"},
            text={"format": {"type": "text"}, "verbosity": "medium"},
            tools=[],
            store=True,
        )
        resposta = resposta.output_text
        return resposta
    except Exception as e:
        print(e)
        if getattr(e, 'status_code', None) == 429 or '429' in str(e):
            return "Eu acho que meus cr√©ditos acabaram üò¢ \nFale com o titio derg se voc√™ quiser saber mais sobre como me ajudar"
        return "Calma um pouquinho, acho que eu to tendo uns problemas aqui... "


async def analisaTicketPortaria(transcript: str, member_info: str, gptModel: str):
    try:
        client = AsyncOpenAI(api_key=os.getenv('OPENAI_TOKEN'))
        instructions = (
            "Voc√™ √© um assistente que avalia o hist√≥rico de um ticket da portaria de um servidor Discord. "
            "Considere todas as informa√ß√µes do perfil do membro e o conte√∫do do ticket para verificar a consist√™ncia das "
            "informa√ß√µes e o linguajar utilizado. Responda se os dados parecem confi√°veis ou duvidosos e destaque os pontos mais relevantes."
        )
        content = f"Perfil do membro:\n{member_info}\n\nHist√≥rico do ticket:\n{transcript}"
        resposta = await client.responses.create(
            model=gptModel,
            instructions=instructions,
            input=content,
            reasoning={"effort": "medium"},
            text={"format": {"type": "text"}, "verbosity": "medium"},
            tools=[],
            store=True,
        )
        return resposta.output_text
    except Exception as e:
        print(e)
        return "N√£o foi poss√≠vel gerar a an√°lise no momento."
